//I used the g++ ordered_set
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int main() {

    int n, k;
    cin >> n >> k;

    ordered_set<int> circle;
    for(int i = 1; i <= n; i++) {

        circle.insert(i);

    }

    int start = 0;
    while(circle.size() > 0) {

        start %= circle.size();
        int remove = (start + k) % circle.size();
        start = remove;
        auto l = circle.find_by_order(remove);
        cout << *l << " ";
        circle.erase(l);

    }

}
